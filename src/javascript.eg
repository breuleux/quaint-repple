
require:
   "earlgrey/5" as eg
   "earlgrey/lib5/expand" ->
      topscope
   repple ->
      Repl, Editor, Outputter
   jquery
   ;; codemirror
   "codemirror/addon/runmode/runmode"
   "codemirror/mode/javascript/javascript"
   ;; "codemirror/mode/coffeescript/coffeescript"
   ;; .earlmode
   .common ->
      fade-in, Into, Cards, make-eval
      stdrepl
      stdeditor
      stdsetup

provide:
   setup

;; globals:
;;    ;; System
;;    ;; document, window, alert, setTimeout, Element
;;    ;; decodeURIComponent
;;    document

_evaluate = eval
evaluate{match text} =
   R"^\{"? ->
      _evaluate{'({text})'}
   else ->
      _evaluate{text}

async setup{config} =
   stdsetup with config & {
      = evaluate
      setenv{values} =
         items{values} each {name, value} ->
            global[name] = value
         undefined
      continuate = R"[{(\[,] *$"
      lang = .javascript
      theme = config.theme
   }


;; jsrepl{elements} =
;;    bindings = elements.bindings or {=}
;;    bindings0 = object with items{bindings} each {k, v} -> {k, global[k]}
;;    targets = elements.targets or {=}
;;    repl = Repl with {
;;       elements = elements
;;       eval = make-eval{evaluate, targets, bindings0, bindings}
;;       setenv{values} =
;;          items{values} each {name, value} ->
;;             global[name] = value
;;          undefined
;;       continuate = R"[{(\[,] *$"
;;       codemirror = codemirror
;;       lang = "javascript"
;;       theme = "repl"
;;    }
;;    repl


;; dom-node-clear{x} =
;;    while x.children.length > 0:
;;       x.removeChild{x.children[0]}

;; jseditor{config, repl} =
;;    bindings = config.bindings or {=}
;;    bindings0 = object with items{bindings} each {k, v} -> {k, global[k]}
;;    targets = config.targets or {=}
;;    ev = make-eval{evaluate, targets, bindings0, bindings}
;;    ed = Editor with {
;;       elements = config
;;       async eval{text} =
;;          if repl:
;;             await repl.process{"compile()", true}
;;             repl.sink{}
;;             #success{undefined}
;;          else:
;;             await ev.call{this, text}
;;       setenv{values} =
;;          items{values} each {name, value} ->
;;             global[name] = value
;;          undefined
;;       prepare{} =
;;          if config.aside:
;;             dom-node-clear{config.aside}
;;       success{v} =
;;          if config.aside and v !== undefined:
;;             Outputter{config.aside, true}.log{v}
;;       failure{err} =
;;          if config.aside:
;;             Outputter{config.aside, true}.log{err}
;;       codemirror = codemirror
;;       lang = "javascript"
;;       theme = "repl"
;;    }
;;    ed


;; div-names = ___.split{"\n"}.map{x -> x.trim{}}.filter{x -> x} with
;;    """
;;    repl
;;    aside
;;    scrollback
;;    inputline
;;    replarea
;;    editor
;;    editorarea
;;    """



;; async setup{config} =

;;    ;; Get all relevant divs
;;    di = config.div-id
;;    elements = object with div-names each name ->
;;       {name, document.query-selector{'#{di} .repple-{name}'}}

;;    targets = {
;;       aside = elements.aside
;;    }

;;    c = Cards with {
;;       cards = config.cards
;;       target = .aside
;;    }

;;    bindings = {
;;       show-card = c.show-card.bind{c}
;;       = Into
;;       compile{} =
;;          if editor and repl:
;;             repl.process{editor.cm.get-value{}, false}
;;          else:
;;             throw E.compile with
;;                '"compile" function only valid if there is an editor and a repl'
;;    }

;;    ;; settings = elements & {= targets, = bindings}
;;    settings = {
;;       = targets
;;       = bindings
;;       = evaluate
;;       setenv{values} =
;;          items{values} each {name, value} ->
;;             global[name] = value
;;          undefined
;;       continuate = R"[{(\[,] *$"
;;       lang = .javascript
;;       theme = .repl
;;    }

;;    repl = if{elements.repl, stdrepl{elements, settings}, null}
;;    editor = if{elements.editor, stdeditor{elements, settings, repl}, null}

;;    if repl:
;;       repl.process{config.code or "", false}

;;    if editor:
;;       editor.cm.set-value{config.code}

;;    focus{} =
;;       if repl:
;;          repl.cm.focus{}
;;       elif editor:
;;          editor.cm.focus{}

;;    if config.body-focus:
;;       document.body.onclick{} =
;;          if document.get-selection{}.to-string{} == "":
;;             focus{}

;;    if config.focus:
;;       focus{}

;;    global[config.variable] = repl
;;    {= repl, = editor}


;;    ;; help.style.height and box.style.height =
;;    ;;    '{Math.max{window.inner-height - 250, 500}}px'











































;; normalize-module-name{match} =
;;    RegExp{"^raw:"}? x -> x.slice{4}
;;    RegExp{":"}? x -> x
;;    x -> "npm:" + x


;; egrepl{elements} =
;;    globvar = "$eg$global"
;;    gene = eg.Generator with {
;;       interactive = true
;;       globvar = globvar
;;       es5 = true
;;       runtime = "earlgrey-runtime"
;;    }
;;    _ev = eg.evaluator with {
;;       globvar = globvar
;;       global = global
;;       filename = "<repl>"
;;       showname = "<repl>"
;;       cwd = "<repl>"
;;    }

;;    async evi{text} =
;;       var code = null
;;       try:
;;          code = gene.generateInteractive{eg.Source{text, "<repl>"}}
;;       catch E.please-load? {message => module-name}:
;;          __reqcache[module-name] =
;;             await System.import{normalize-module-name{module-name}}
;;          return evi{text}
;;       _ev{code}

;;    repl = Repl with {
;;       elements = elements
;;       async eval{text} =
;;          try:
;;             res = await evi{text}
;;             #success{res}
;;          catch e:
;;             #failure{e}
;;    }

;;    glob = global

;;    __reqcache = {=}

;;    ;; repl.setenv{values} =
;;    ;;    items{values} each {name, value} ->
;;    ;;       gene.env.bind{topscope, name, #variable{name}}
;;    ;;       glob[name] = value
;;    ;;    undefined

;;    ;; repl.setenv with {
;;    ;;    $io = {}
;;    ;;    $currenti = -1
;;    ;;    dir = require: /dir
;;    ;;    jQuery = jquery
;;    ;;    = System
;;    ;;    = DOM
;;    ;;    = normalize-module-name
;;    ;;    = Outputter
;;    ;;    = __reqcache
;;    ;;    = global
;;    ;; }

;;    ;; repl.eval with S[
;;    ;;    globals:
;;    ;;       window, document, alert, Element

;;    ;;    wait = promisify with {d, f} -> setTimeout.call{null, f, d}

;;    ;;    _load{match url} =
;;    ;;       R".js$"? ->
;;    ;;          new Promise with {resolve, reject} ->
;;    ;;             document.getElementsByTagName{"head"}[0].appendChild with
;;    ;;                DOM with script %
;;    ;;                   async = true
;;    ;;                   type = "text/javascript"
;;    ;;                   src = url
;;    ;;                   onload{} = resolve{undefined}
;;    ;;       R".css$"? ->
;;    ;;          document.getElementsByTagName{"head"}[0].appendChild with
;;    ;;             DOM with link %
;;    ;;                rel = "stylesheet"
;;    ;;                type = "text/css"
;;    ;;                href = url
;;    ;;          undefined
;;    ;;       else ->
;;    ;;          throw E.unknown_resource_type{url}

;;    ;;    inline-macro $out{match}:
;;    ;;       do:
;;    ;;          globals: $currenti
;;    ;;       #void{} ->
;;    ;;          `$io[^=$currenti]`
;;    ;;       expr ->
;;    ;;          `$io[^=$currenti][^expr]`

;;    ;;    inline-macro print{match expr}:
;;    ;;       `^expr in ^[#symbol{target}]` ->
;;    ;;          ```
;;    ;;          t = ^expr
;;    ;;          Outputter{document.get-element-by-id{^=target}, true}.log{t}
;;    ;;          t
;;    ;;          ```
;;    ;;       else ->
;;    ;;          `t = ^expr, $io[$currenti].log{t}, t`

;;    ;;    inline-macro __require{#data{expr}}:
;;    ;;       ```
;;    ;;       await System.import{normalize-module-name{^expr}}
;;    ;;       ```

;;    ;;    inline-macro __require-m{#data{expr}}:
;;    ;;       ```
;;    ;;       match __reqcache[^expr]:
;;    ;;          undefined? ->
;;    ;;             throw E.please-load{^expr}
;;    ;;          Error? e ->
;;    ;;             throw e
;;    ;;          module ->
;;    ;;             module
;;    ;;       ```

;;    ;;    inline-macro load{url}:
;;    ;;       `await _load{^url}`

;;    ;; ]

;;    repl


;; fget{url} =
;;    new Promise with {resolve, reject} ->
;;       jquery.ajax with {
;;          url = url
;;          type = "GET"
;;          contentType = "text/plain"
;;          error{jqxhr, statusText, error} =
;;             reject{E.ajax{error or statusText, {statusText = statusText, error = error}}}
;;          success{result} =
;;             resolve{result}
;;       }




;; getcode{engine, node} =
;;    code = tools.rawRelative{tools.shed{node}}
;;    lines = code.split{"\n"}
;;    while [R"^ *$"? lines[0]]:
;;       lines.shift{}
;;    while [R"^ *$"? lines[lines.length - 1]]:
;;       lines.pop{}
;;    ;; R"( *)(.*)"! {_, indent, line0} = lines[0]
;;    ;; nindent = indent.length
;;    ;; xs.join{"\n"} where
;;    ;;    xs = {line0} ++
;;    ;;       lines.slice{1} each line ->
;;    ;;          line.slice{nindent}
;;    tools.dedent{lines.join{"\n"}}

;; ri{a, match = null} =
;;    null? ->
;;       Math.floor{Math.random{} * a}
;;    b ->
;;       Math.floor{a + Math.random{} * [b - a]}


;; shuffle{a} =
;;    n = a.length
;;    0..[n - 1] each i ->
;;       j = ri{i, n}
;;       {a[i], a[j]} = {a[j], a[i]}
;;    a


;; class Cards:

;;    constructor{@order} =
;;       @cards = {=}
;;       @cards-stripped = {=}
;;       @card-order = {}

;;    register{path, card} =
;;       @cards[card.name] = card
;;       @cards-stripped[card.name.replace{R"^([0-9]+)-", ""}] = card

;;    shuffle{} =
;;       @card-order = shuffle{xs} where
;;          xs = items{@cards} each {k, v} -> v

;;    sort{} =
;;       ord = items{@cards}.sort with
;;          {{R"^([0-9]+)-"! {_, Number! n1}, _}
;;           {R"^([0-9]+)-"! {_, Number! n2}, _}} ->
;;             n1 - n2
;;       @card-order = ord each {k, v} -> v

;;    .get{match name = null} =
;;       null? ->
;;          if @card-order == {}:
;;             self[@order]{}
;;          @card-order.shift{}
;;       else ->
;;          @cards-stripped[name]

;;    "::repr"{repr} =
;;       repr with
;;          object with items{@cards} each {name, {=> descr}} ->
;;             {code % name, span % descr}


;; async populate-cards{plugin, manifest} =
;;    async populate{filename} =
;;       contents = await fget{'qdoc/{filename}'}
;;       q = create{plugin}
;;       q.run{contents}
;;    filenames = [await fget{'qdoc/{manifest}'}].split{"\n"}
;;    await all
;;       filenames each filename when filename -> populate{filename}


;; class ReplPlugin:

;;    constructor{@repl, order} =
;;       @cards = Cards{order}

;;    clickable{code, text = null} =
;;       .clickable %
;;          async onclick{e and {=> shiftKey}} =
;;             match shiftKey:
;;                do: e.preventDefault{}
;;                true? ->
;;                   @repl.cm.setValue{code}
;;                   @repl.cm.focus{}
;;                else ->
;;                   await @repl.process_all{code, true, true}
;;                   @repl.cm.focus{}
;;          text or @repl.highlight{code, true}

;;    make-row{items} =
;;       span %
;;          enumerate{items} each {match, item} ->
;;             0 ->
;;                item
;;             else ->
;;                span % [span.separator % "", item]

;;    install-to{eng} =

;;       eng.register-documents with {
;;          cards = @cards
;;       }

;;       eng.register-rules with {

;;          "\\maybe\\label / \\code"{engine, {label => match, => code}} =
;;             #text{""} ->
;;                match tools.collapse{"/", code}:
;;                   {x} -> @clickable{getcode{engine, x}}
;;                   {*xs} -> @make-row with
;;                      xs each x -> @clickable{getcode{engine, x}, null}
;;             label ->
;;                @clickable with
;;                   getcode{engine, code}
;;                   engine.gen{label}

;;          "[\\tag = \\descr] ---> \\contents"{engine, match} =
;;             {=> tag, => descr, => contents} ->
;;                var doc = null
;;                var code = null
;;                tools.statements{contents} each
;;                   Seq? {match directive, Oper? {"="}, contents} ->
;;                      Text? {.doc} ->
;;                         doc = engine.translate{tools.shedIndent{contents}, .enode} with
;;                            {paragraph = true}
;;                      Text? {.code} ->
;;                         code = getcode{engine, contents}
;;                      else ->
;;                         throw E.syntax.unknown_directive{directive}
;;                   else ->
;;                      pass
;;                if not doc and not code:
;;                   doc =
;;                      engine.translate{tools.shedIndent{contents}, .enode} with
;;                         {paragraph = true}
;;                Into{.cards} with {
;;                   name = tools.raw{tag}
;;                   descr = engine.translate{descr, .enode}
;;                   doc = doc
;;                   code = code
;;                }
;;       }



;; async setup{config} =
;;    print "A"

;;    ;; box = document.getElementById{"box"}
;;    ;; help = document.getElementById{"help"}
;;    ;; repl = egrepl with {
;;    ;;    box = box
;;    ;;    target = document.getElementById{"interactive"}
;;    ;;    inputline = document.getElementById{"inputline"}
;;    ;;    textarea = document.getElementById{"code"}
;;    ;; }

;;    di = config.div-id
;;    print "B"

;;    box = document.query-selector{'#{di} .repple-interactive'}
;;    help = document.query-selector{'#{di} .repple-info'}
;;    print box
;;    print help

;;    repl = egrepl with {
;;       box = box
;;       target = print document.query-selector{'#{di} .repple-scrollback'}
;;       inputline = print document.query-selector{'#{di} .repple-inputline'}
;;       textarea = print document.query-selector{'#{di} .repple-textarea'}
;;    }

;;    print "C"

;;    help.style.height and box.style.height =
;;       '{Math.max{window.inner-height - 250, 500}}px'

;;    ;; cool-plugin = ReplPlugin{repl, .shuffle}
;;    ;; tut-plugin = ReplPlugin{repl, .sort}

;;    ;; await populate-cards{cool-plugin, "cools.txt"}
;;    ;; await populate-cards{tut-plugin, "tut.txt"}

;;    ;; repl.setenv with {
;;    ;;    cools = cool-plugin.cards
;;    ;;    tuts = tut-plugin.cards
;;    ;;    q = create{}
;;    ;;    $repl = repl
;;    ;;    $$clickable = cool-plugin.clickable.bind{cool-plugin}
;;    ;; }

;;    ;; await repl.eval with S[

;;    ;;    fade-in{out, contents} =
;;    ;;       printed = out.log{contents}
;;    ;;       printed.style.transition = "opacity 500ms";
;;    ;;       printed.style.opacity = 0
;;    ;;       window.getComputedStyle{printed}.opacity
;;    ;;       printed.style.opacity = 1
;;    ;;       undefined

;;    ;;    $help = Outputter{document.get-element-by-id{"help"}, true}

;;    ;;    async __show-cool{out, name, history = true} =
;;    ;;       thecool = cools.get{name}
;;    ;;       if not thecool:
;;    ;;          throw E.nocool{'No entry found for {code % name}'}
;;    ;;       ;; if thecool.doc:
;;    ;;       ;;    fade-in{out} with
;;    ;;       ;;       div.card.cool %
;;    ;;       ;;          h2 % thecool.descr
;;    ;;       ;;          div % thecool.doc
;;    ;;       ;;          p % '{b%"Click"} on the code below to execute it (Shift-Click to paste)'
;;    ;;       ;;          .coolcode %
;;    ;;       ;;             $$clickable{thecool.code}
;;    ;;       if thecool.code:
;;    ;;          await $repl.process{thecool.code, history}
;;    ;;       undefined

;;    ;;    __show-tut{out, name, history = true} =
;;    ;;       thetut = tuts.get{name}
;;    ;;       if not thetut:
;;    ;;          throw E.notut{'No entry found for {code % name}'}
;;    ;;       if thetut.doc:
;;    ;;          fade-in{out} with
;;    ;;             div.card.tut %
;;    ;;                if{String{thetut.descr}.starts-with{"..."}
;;    ;;                   ""
;;    ;;                   h2 % thetut.descr}
;;    ;;                div % thetut.doc
;;    ;;       undefined

;;    ;;    inline-macro cool{x}:
;;    ;;       `__show-cool{$out, ^name}` where
;;    ;;          name = match x:
;;    ;;             #void{} ->
;;    ;;                `null`
;;    ;;             #value{name} or #symbol{name} ->
;;    ;;                #value{name}
;;    ;;             else ->
;;    ;;                x

;;    ;;    inline-macro next{#void{}}:
;;    ;;       `__show-tut{$help, null}`

;;    ;;    inline-macro tut{x}:
;;    ;;       `__show-tut{$help, ^name}` where
;;    ;;          name = match x:
;;    ;;             #void{} ->
;;    ;;                `null`
;;    ;;             #value{name} or #symbol{name} ->
;;    ;;                #value{name}
;;    ;;             else ->
;;    ;;                x
;;    ;; ]

;;    ;; await repl.process{"next", false}

;;    document.body.onclick{} =
;;       if document.get-selection{}.to-string{} == "":
;;          repl.cm.focus{}

;;    repl.cm.focus{}
;;    repl

